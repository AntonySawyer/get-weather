{"version":3,"sources":["utils/credentials.js","utils/processData.js","components/geoPicker/geoPicker.js","components/providerPicker/providerPicker.js","components/Header/Header.js","components/weatherScreen/weatherScreen.js","App.js","utils/needUpdate.js","serviceWorker.js","index.js"],"names":["owm","wb","convertUnixTime","unixDate","Date","toTimeString","split","filter","i","length","join","geoPicker_geoPicker","props","react_default","a","createElement","className","cityName","type","id","placeholder","onClick","handleInput","getCity","navigator","geolocation","getCurrentPosition","showPosition","x","document","getElementById","innerHTML","getLocation","position","fetch","concat","coords","latitude","longitude","then","rs","json","data","console","log","catch","error","providerPicker_providerPicker","htmlFor","onChange","defaultValue","default","value","Header","provider","weatherScreen","weather","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","storeValues","Array","fill","ip","city","country","getWeather","key","selector","el","querySelector","inputValue","state","localStorage","getItem","currTime","now","cityFromStorage","timeFromStorage","Number","needUpdate","_this2","arguments","undefined","endpoint","Provider","newWeather","temp","pressure","sunrise","sunset","sky","pres","description","main","sys","processData","arr","_this3","saveToLocal","forEach","pair","setState","defineProperty","includes","setItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78786c3d.chunk.js","sourcesContent":["export const owm = {  \r\n  'url': 'https://api.openweathermap.org/data/2.5/weather?q=',\r\n  'apiKey': '&appid=51835371b1252869b2e89700df1cdbba',\r\n  'settings': '&units=metric'\r\n}\r\n\r\nexport const wb = {\r\n  'url': 'https://api.weatherbit.io/v2.0/current?city=',\r\n  'apikey': '&key=51b2268802424671a8d742c3c2e15eaf'\r\n}\r\n","export default (data, provider) => {\r\n  let temp, pressure, sunrise, sunset, sky;\r\n  switch (provider) {\r\n    case 'wb':\r\n      temp = data.data[0].temp;\r\n      pressure = data.data[0].pres;\r\n      sunrise = data.data[0].sunrise;\r\n      sunset = data.data[0].sunset;\r\n      sky = data.data[0].weather.description;\r\n      break;\r\n    case 'owm':\r\n      temp = data.main.temp;\r\n      pressure = data.main.pressure;\r\n      sunrise = convertUnixTime(data.sys.sunrise * 1000);\r\n      sunset = convertUnixTime(data.sys.sunset * 1000);\r\n      sky = data.weather[0].description;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return [temp, pressure, sunrise, sunset, sky];\r\n}\r\n\r\nconst convertUnixTime = unixDate => new Date(unixDate).toTimeString().split(':').filter(i => i.length === 2).join(':');\r\n","import React from 'react';\r\nimport './geoPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"geoPicker\">\r\n      <p><i className=\"fas fa-map-marked-alt\"></i> {props.cityName}</p>\r\n      <div className=\"joinInput\">\r\n        <input type=\"text\" id=\"locationSearch\" placeholder=\"Or type...\" />\r\n        <button onClick={() => props.handleInput('cityName', '#locationSearch')}><i className=\"fas fa-search-location\"></i></button>\r\n      </div>\r\n      <button onClick={props.getCity}>Detect by IP</button>\r\n\r\n      <button onClick={() => getLocation()}>Detect by geoposition</button>\r\n      <span id=\"alertGeo\"></span>\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\n\r\n    \r\nfunction getLocation() {\r\n  if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(showPosition);\r\n    } else {\r\n    let x = document.getElementById(\"alertGeo\");\r\n      x.innerHTML = \"Geolocation is not supported by this browser.\";\r\n    }\r\n  }\r\n  \r\nfunction showPosition(position) {\r\n  fetch(`https://geocode.xyz/${position.coords.latitude},${position.coords.longitude}?geoit=json`)\r\n    .then(rs => rs.json())\r\n    .then(data => console.log(data))\r\n    .catch(error => {\r\n      console.error(error);\r\n      return null;\r\n    });\r\n  }","import React from 'react';\r\n\r\nimport './providerPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"providerPicker\">\r\n      <label htmlFor=\"providerPicker\"><i className=\"fas fa-satellite-dish\"></i> </label>\r\n      <select id=\"providerPicker\" onChange={() => props.handleInput('provider', '#providerPicker')} defaultValue={props.default}>\r\n        <option value=\"owm\">Open Weather Map</option>\r\n        <option value=\"wb\">WeatherBit</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport GeoPicker from '../geoPicker/geoPicker';\r\nimport ProviderPicker from '../providerPicker/providerPicker';\r\nimport './header.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <header>\r\n      <GeoPicker cityName={props.cityName} handleInput={props.handleInput} getCity={props.getCity} />\r\n      <ProviderPicker default={props.provider} handleInput={props.handleInput} />\r\n    </header>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './weather.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"weatherWrap\">\r\n      <p>\r\n        <i className=\"fas fa-thermometer-half\"></i>\r\n        <span className=\"weatherText temperature\">Temperature - {props.weather[0]}℃</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-bars\"></i>\r\n        <span className=\"weatherText\">Pressure - {props.weather[1]} hPa</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-sun\"></i>\r\n        <span className=\"weatherText\">Sunrise - {props.weather[2]} (UTC+3)</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-cloud-moon\"></i>\r\n        <span className=\"weatherText\">Sunset - {props.weather[3]} (UTC+3)</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-cloud\"></i>\r\n        <span className=\"weatherText\">Sky - {props.weather[4]}</span>\r\n      </p>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport * as Provider from './utils/credentials';\r\nimport processData from './utils/processData';\r\nimport needUpdate from './utils/needUpdate';\r\nimport Header from './components/Header/Header';\r\nimport WeatherScreen from './components/weatherScreen/weatherScreen';\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cityName: '???',\r\n      provider: localStorage.getItem('provider') || 'owm',\r\n      weather: new Array(5).fill('?')\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const currTime = Date.now();\r\n    const cityFromStorage = localStorage.getItem('cityName');\r\n    if (needUpdate(currTime) || cityFromStorage === 'unavailable') {\r\n      this.getCity();\r\n    } else {\r\n      this.storeValues([\r\n        ['cityName', cityFromStorage],\r\n        ['weather', localStorage.getItem('weather').split(',')]\r\n      ]);\r\n    }\r\n    this.storeValues([['lastLogin', currTime]]);\r\n  }\r\n\r\n  getCity = () => {\r\n    this.storeValues([\r\n      ['cityName', '???'],\r\n      ['weather', new Array(5).fill('?')]\r\n    ]);\r\n    fetch('https://api.ipify.org/?format=json')\r\n      .then(rs => rs.json())\r\n      .then(data => fetch(`https://ipapi.co/${data.ip}/json/`))\r\n      .then(rs => rs.json())\r\n      .then(data => this.storeValues([['cityName', `${data.city},${data.country}`]]))\r\n      .then(() => this.getWeather())\r\n      .catch(error => {\r\n        console.error(error);\r\n        return null;\r\n      });\r\n  }\r\n\r\n  getWeather(provider = this.state.provider, cityName = this.state.cityName) {\r\n    const endpoint = (provider === 'owm') \r\n      ? `${Provider.owm.url}${cityName}${Provider.owm.apiKey}${Provider.owm.settings}`\r\n      : `${Provider.wb.url}${cityName}${Provider.wb.apikey}`;\r\n    fetch(endpoint)\r\n      .then(rs => rs.json())\r\n      .then(data => {\r\n        const newWeather = processData(data, provider);\r\n        this.storeValues([['weather', newWeather]]);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        this.storeValues([\r\n          ['cityName', 'unavailable'],\r\n          ['weather', new Array(5).fill('?')]\r\n        ]);\r\n        return null;\r\n      });\r\n  }\r\n\r\n  storeValues(arr) {\r\n    const saveToLocal = ['weather', 'provider', 'cityName', 'lastLogin'];\r\n    arr.forEach(pair => {\r\n      this.state[pair[0]] && this.setState({ [pair[0]]: pair[1] });\r\n      if (saveToLocal.includes(pair[0])) {\r\n        localStorage.setItem(pair[0], pair[1]);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleInput = (key, selector) => {\r\n    const el = document.querySelector(selector);\r\n    const inputValue = el.value;\r\n    if (inputValue !== '') {\r\n      this.storeValues([\r\n        ['weather', new Array(5).fill('?')],\r\n        [key, inputValue]\r\n      ]);\r\n      if (key === 'provider') {\r\n        this.getWeather(inputValue);\r\n      } else {\r\n        this.getWeather(this.state.provider, inputValue);\r\n        el.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Header cityName={this.state.cityName}\r\n          handleInput={this.handleInput}\r\n          provider={this.state.provider}\r\n          getCity={this.getCity} />\r\n        <main>\r\n          <WeatherScreen weather={this.state.weather} />\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default (currTime) => {\r\n  const timeFromStorage = Number(localStorage.getItem('lastLogin'));\r\n  const timeDiff = (new Date(currTime) - new Date(timeFromStorage)) / 1000 / 60 / 60;\r\n  return timeDiff > 2;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}