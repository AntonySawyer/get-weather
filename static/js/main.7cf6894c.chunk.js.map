{"version":3,"sources":["components/geoPicker/index.js","components/geoPicker/geoPicker.js","components/providerPicker/index.js","components/providerPicker/providerPicker.js","components/Header/index.js","components/Header/Header.js","components/weatherScreen/index.js","components/weatherScreen/weatherScreen.js","utils/credentials.js","utils/processData.js","components/App/index.js","components/App/App.js","utils/needUpdate.js","serviceWorker.js","index.js"],"names":["geoPicker","props","react_default","a","createElement","className","cityName","onClick","getCity","handleInput","type","id","placeholder","providerPicker","htmlFor","onChange","defaultValue","provider","value","Header","geoProps","Object","objectWithoutProperties","components_geoPicker","assign","components_providerPicker","weatherScreen","weather","owm","url","apiKey","settings","wb","apikey","processData","data","wObj","temp","pres","sunrise","sunset","description","main","pressure","convTime","sys","unixDate","Date","toTimeString","split","filter","i","length","join","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","storeValues","Array","fill","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","alert","fetch","then","rs","json","concat","ip","catch","error","console","getEndpoint","arguments","undefined","state","Provider","endpoint","newWeather","name","country","city_name","country_code","coord","lat","lon","arr","saveToLocal","forEach","pair","setState","defineProperty","includes","localStorage","setItem","key","selector","el","document","querySelector","inputValue","getItem","currTime","now","cityFromStorage","timeFromStorage","Number","needUpdate","components_Header","components_weatherScreen","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cf6894c.chunk.js","sourcesContent":["import geoPicker from './geoPicker';\r\n\r\nexport default geoPicker;","import React from 'react';\r\nimport './geoPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"geoPicker\">\r\n      <p>{props.cityName}</p>\r\n      <button onClick={props.getCity}>Autodetect</button>\r\n      <div className=\"joinInput\">\r\n        <button onClick={() => props.handleInput('cityName', '#locationSearch')}>Go!</button>\r\n        <input type=\"text\" id=\"locationSearch\" placeholder=\"Or type...\" />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import providerPicker from './providerPicker';\r\n\r\nexport default providerPicker;","import React from 'react';\r\n\r\nimport './providerPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"providerPicker\">\r\n      <label htmlFor=\"providerPicker\">Provider: </label>\r\n      <select id=\"providerPicker\" onChange={() => props.handleInput('provider', '#providerPicker')} defaultValue={props.provider}>\r\n        <option value=\"owm\">Open Weather Map</option>\r\n        <option value=\"wb\">WeatherBit</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}","import Header from \"./Header\";\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport GeoPicker from '../geoPicker';\r\nimport ProviderPicker from '../providerPicker';\r\nimport './header.css';\r\n\r\nexport default (props) => {\r\n  const { provider, handleInput, ...geoProps} = props;\r\n  return (\r\n    <header>\r\n      <GeoPicker handleInput={handleInput} { ...geoProps} />\r\n      <ProviderPicker handleInput={handleInput} {...provider} />\r\n    </header>\r\n  )\r\n}\r\n","import weatherScreen from './weatherScreen';\r\n\r\nexport default weatherScreen;","import React from 'react';\r\nimport './weatherScreen.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"weatherWrap\">\r\n      <p>\r\n        <span className=\"weatherText temperature\">{props.weather[0]} â„ƒ</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">{props.weather[4]}</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">Pressure - {props.weather[1]} hPa</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">Sunrise - {props.weather[2]} (UTC+3)</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">Sunset - {props.weather[3]} (UTC+3)</span>\r\n      </p>\r\n    </section>\r\n  )\r\n}\r\n","export const owm = {  \r\n  'url': 'https://api.openweathermap.org/data/2.5/weather?',\r\n  'apiKey': '&appid=51835371b1252869b2e89700df1cdbba',\r\n  'settings': '&units=metric'\r\n}\r\n\r\nexport const wb = {\r\n  'url': 'https://api.weatherbit.io/v2.0/current?',\r\n  'apikey': '&key=51b2268802424671a8d742c3c2e15eaf'\r\n}\r\n","export default (data, provider) => {\r\n  switch (provider) {\r\n    case 'wb':\r\n      const wObj = data.data[0];\r\n      return [wObj.temp, wObj.pres, wObj.sunrise, wObj.sunset, wObj.description ];\r\n    case 'owm':\r\n      return [data.main.temp, data.main.pressure, convTime(data.sys.sunrise), convTime(data.sys.sunset), data.weather[0].description];\r\n    default:\r\n      return ['?', '?', '?', '?', '?'];\r\n  }\r\n}\r\n\r\nconst convTime = unixDate => new Date(unixDate*1000).toTimeString().split(':').filter(i => i.length === 2).join(':');\r\n","import App from \"./App\";\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport Header from '../Header';\r\nimport WeatherScreen from '../weatherScreen';\r\n\r\nimport * as Provider from '../../utils/credentials';\r\nimport processData from '../../utils/processData';\r\nimport needUpdate from '../../utils/needUpdate';\r\n// import geoByIP from '../../utils/geoByIP';\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cityName: '???',\r\n      provider: localStorage.getItem('provider') || 'owm',\r\n      weather: new Array(5).fill('?'),\r\n      latitude: localStorage.getItem('latitude') || '',\r\n      longitude: localStorage.getItem('longitude') || ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const currTime = Date.now();\r\n    const cityFromStorage = localStorage.getItem('cityName');\r\n    if (needUpdate(currTime) || cityFromStorage === 'unavailable') {\r\n      this.getCity();\r\n    } else {\r\n      this.storeValues([\r\n        ['cityName', cityFromStorage],\r\n        ['weather', localStorage.getItem('weather').split(',')]\r\n      ]);\r\n    }\r\n    this.storeValues([['lastLogin', currTime]]);\r\n  }\r\n\r\n  getCity = () => {\r\n    this.storeValues([\r\n      ['cityName', '???'],\r\n      ['weather', new Array(5).fill('?')]\r\n    ]);\r\n    const locationApprove = (position) => {\r\n      this.storeValues([\r\n        ['latitude', position.coords.latitude],\r\n        ['longitude', position.coords.longitude]\r\n      ]);\r\n      this.getWeather();\r\n    };\r\n    const locationDenied = () => {\r\n        alert('Geolocation was denied by you or is not supported by this browser. We try detect city by IP.');\r\n        fetch('https://api.ipify.org/?format=json')\r\n          .then(rs => rs.json())\r\n          .then(data => fetch(`https://ipapi.co/${data.ip}/json/`))\r\n          .then(rs => rs.json())\r\n          .then(data => {\r\n            this.storeValues([\r\n              ['longitude', `${data.longitude}`],\r\n              ['latitude', `${data.latitude}`]]);\r\n            this.getWeather();\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n            return null;\r\n          });\r\n    }\r\n    navigator.geolocation.getCurrentPosition(locationApprove, locationDenied);\r\n  }\r\n\r\n  getEndpoint = (provider = this.state.provider, cityName = false) => {\r\n    if (cityName) {\r\n      const endpoint = (provider === 'owm')\r\n      ? `${Provider.owm.url}q=${cityName}${Provider.owm.apiKey}${Provider.owm.settings}`\r\n      : `${Provider.wb.url}city=${cityName}${Provider.wb.apikey}`;\r\n      return endpoint;\r\n    } else {\r\n      const endpoint = (provider === 'owm')\r\n        ? `${Provider.owm.url}&lat=${this.state.latitude}&lon=${this.state.longitude}${Provider.owm.apiKey}${Provider.owm.settings}`\r\n        : `${Provider.wb.url}&lat=${this.state.latitude}&lon=${this.state.longitude}${Provider.wb.apikey}`;\r\n      return endpoint;\r\n    }\r\n  }\r\n\r\n  getWeather = (provider = this.state.provider, cityName) => {\r\n    const endpoint = this.getEndpoint(provider, cityName);\r\n    fetch(endpoint)\r\n      .then(rs => rs.json())\r\n      .then(data => {\r\n        const newWeather = processData(data, provider);\r\n        this.storeValues([\r\n          ['weather', newWeather], \r\n          ['cityName', provider === 'owm' ? `${data.name}, ${data.sys.country}` : `${data.data[0].city_name}, ${ data.data[0].country_code}`],\r\n          ['latitude', provider === 'owm' ? data.coord.lat : data.data[0].lat],\r\n          ['longitude', provider === 'owm' ? data.coord.lon : data.data[0].lon]\r\n        ]);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        this.storeValues([\r\n          ['cityName', 'unavailable'],\r\n          ['weather', new Array(5).fill('?')]\r\n        ]);\r\n        return null;\r\n      });\r\n  }\r\n\r\n  storeValues = (arr) => {\r\n    const saveToLocal = ['weather', 'provider', 'cityName', 'lastLogin', 'longitude', 'latitude'];\r\n    arr.forEach(pair => {\r\n      this.setState({ [pair[0]]: pair[1] });\r\n      if (saveToLocal.includes(pair[0])) {\r\n        localStorage.setItem(pair[0], pair[1]);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleInput = (key, selector) => {\r\n    const el = document.querySelector(selector);\r\n    const inputValue = el.value;\r\n    if (inputValue !== '') {\r\n      this.storeValues([\r\n        ['weather', new Array(5).fill('?')],\r\n        [key, inputValue]\r\n      ]);\r\n      if (key === 'provider') {\r\n        this.getWeather(inputValue);\r\n      } else {\r\n        this.getWeather(this.state.provider, inputValue);\r\n        el.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Header cityName={this.state.cityName}\r\n          handleInput={this.handleInput}\r\n          provider={this.state.provider}\r\n          getCity={this.getCity} />\r\n        <main>\r\n          <WeatherScreen weather={this.state.weather} />\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default (currTime) => {\r\n  const timeFromStorage = Number(localStorage.getItem('lastLogin'));\r\n  const timeDiff = (new Date(currTime) - new Date(timeFromStorage)) / 1000 / 60 / 60;\r\n  return timeDiff > 2;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}