{"version":3,"sources":["utils/credentials.js","utils/timeConvert.js","components/geoPicker/geoPicker.js","components/providerPicker/providerPicker.js","components/Header/Header.js","components/weatherScreen/weatherScreen.js","App.js","utils/needUpdate.js","utils/processData.js","serviceWorker.js","index.js"],"names":["owm","wb","timeConvert","unixDate","date","Date","parsedHours","getHours","toString","hours","length","concat","getMinutes","geoPicker_geoPicker","props","react_default","a","createElement","className","cityName","type","id","placeholder","onClick","handleInput","getCity","providerPicker_providerPicker","htmlFor","onChange","defaultValue","default","value","Header","provider","weatherScreen","weather","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","localStorage","getItem","Array","fill","currTime","now","cityFromStorage","timeFromStorage","Number","needUpdate","storeValues","split","_this2","fetch","then","rs","json","data","ip","city","country","getWeather","catch","error","console","_this3","arguments","undefined","endpoint","Provider","newWeather","temp","pressure","sunrise","sunset","sky","pres","description","main","sys","processData","arr","_this4","saveToLocal","forEach","pair","setState","defineProperty","includes","setItem","key","selector","el","document","querySelector","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63626e87.chunk.js","sourcesContent":["export const owm = {  \r\n  'url': 'https://api.openweathermap.org/data/2.5/weather?q=',\r\n  'apiKey': '&appid=51835371b1252869b2e89700df1cdbba',\r\n  'settings': '&units=metric'\r\n}\r\n\r\nexport const wb = {\r\n  'url': 'https://api.weatherbit.io/v2.0/current?city=',\r\n  'apikey': '&key=51b2268802424671a8d742c3c2e15eaf'\r\n}\r\n","export default (unixDate) => {\r\n  const date = new Date(unixDate);\r\n  const parsedHours = date.getHours().toString();\r\n  const hours = parsedHours.length === 2 ? parsedHours : `0${parsedHours}`;\r\n  return `${hours}:${date.getMinutes()}`;\r\n}\r\n","import React from 'react';\r\nimport './geoPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"geoPicker\">\r\n      <p><i className=\"fas fa-map-marked-alt\"></i> {props.cityName}</p>\r\n      <div className=\"joinInput\">\r\n        <input type=\"text\" id=\"locationSearch\" placeholder=\"Or type...\" />\r\n        <button onClick={() => props.handleInput('cityName', '#locationSearch')}><i className=\"fas fa-search-location\"></i></button>\r\n      </div>\r\n      <button onClick={() => props.getCity()}>Auto detect</button>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport './providerPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"providerPicker\">\r\n      <label htmlFor=\"providerPicker\"><i className=\"fas fa-satellite-dish\"></i> </label>\r\n      <select id=\"providerPicker\" onChange={() => props.handleInput('provider', '#providerPicker')} defaultValue={props.default}>\r\n        <option value=\"owm\">Open Weather Map</option>\r\n        <option value=\"wb\">WeatherBit</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport GeoPicker from '../geoPicker/geoPicker';\r\nimport ProviderPicker from '../providerPicker/providerPicker';\r\nimport './header.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <header>\r\n      <GeoPicker cityName={props.cityName} handleInput={props.handleInput} getCity={props.getCity} />\r\n      <ProviderPicker default={props.provider} handleInput={props.handleInput} />\r\n    </header>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './weather.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"weatherWrap\">\r\n      <p>\r\n        <i className=\"fas fa-thermometer-half\"></i>\r\n        <span className=\"weatherText temperature\">Temperature - {props.weather[0]}â„ƒ</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-bars\"></i>\r\n        <span className=\"weatherText\">Pressure - {props.weather[1]} hPa</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-sun\"></i>\r\n        <span className=\"weatherText\">Sunrise - {props.weather[2]} (UTC+3)</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-cloud-moon\"></i>\r\n        <span className=\"weatherText\">Sunset - {props.weather[3]} (UTC+3)</span>\r\n      </p>\r\n      <p>\r\n        <i className=\"fas fa-cloud\"></i>\r\n        <span className=\"weatherText\">Sky - {props.weather[4]}</span>\r\n      </p>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\n\nimport * as Provider from './utils/credentials';\nimport processData from './utils/processData';\nimport needUpdate from './utils/needUpdate';\nimport Header from './components/Header/Header';\nimport WeatherScreen from './components/weatherScreen/weatherScreen';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: '???',\n      provider: localStorage.getItem('provider') || 'owm',\n      weather: new Array(5).fill('?')\n    }\n  }\n\n  componentDidMount() {\n    const currTime = Date.now();\n    const cityFromStorage = localStorage.getItem('cityName');\n    if (needUpdate(currTime) || cityFromStorage === 'unavailable') {\n      this.getCity();\n    } else {\n      this.storeValues([\n        ['cityName', cityFromStorage],\n        ['weather', localStorage.getItem('weather').split(',')]\n      ]);\n    }\n    this.storeValues([['lastLogin', currTime]]);\n  }\n\n  getCity() {\n    this.storeValues([\n      ['cityName', '???'],\n      ['weather', new Array(5).fill('?')]\n    ]);\n    fetch('https://api.ipify.org/?format=json')\n      .then(rs => rs.json())\n      .then(data => {\n        fetch(`https://ipapi.co/${data.ip}/json/`)\n          .then(rs => rs.json())\n          .then(data => {\n            this.storeValues([['cityName', `${data.city},${data.country}`]]);\n          })\n          .then(() => this.getWeather() )\n          .catch(error => {\n            console.error(error);\n            return null;\n          })\n      });\n  }\n\n  getWeather(provider = this.state.provider, cityName = this.state.cityName) {\n    const endpoint = (provider === 'owm') \n      ? `${Provider.owm.url}${cityName}${Provider.owm.apiKey}${Provider.owm.settings}`\n      : `${Provider.wb.url}${cityName}${Provider.wb.apikey}`;\n    fetch(endpoint)\n      .then(rs => rs.json())\n      .then(data => {\n        const newWeather = processData(data, provider);\n        this.storeValues([['weather', newWeather]]);\n      })\n      .catch(error => {\n        console.error(error);\n        this.storeValues([\n          ['cityName', 'unavailable'],\n          ['weather', new Array(5).fill('?')]\n        ]);\n        return null;\n      });\n  }\n\n  storeValues(arr) {\n    const saveToLocal = ['weather', 'provider', 'cityName', 'lastLogin'];\n    arr.forEach(pair => {\n      this.state[pair[0]] && this.setState({ [pair[0]]: pair[1] });\n      if (saveToLocal.includes(pair[0])) {\n        localStorage.setItem(pair[0], pair[1]);\n      }\n    });\n  }\n\n  handleInput(key, selector) {\n    this.storeValues([\n      ['weather', new Array(5).fill('?')]\n    ]);\n    const el = document.querySelector(selector);\n    this.storeValues([[key, el.value]]);\n    if (key === 'provider') {\n      this.getWeather(el.value);      \n    } else {\n      this.getWeather(this.state.provider, el.value);\n      el.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Header cityName={this.state.cityName} \n          handleInput={this.handleInput.bind(this)} \n          provider={this.state.provider} \n          getCity={this.getCity.bind(this)} />\n        <main>\n          <WeatherScreen weather={this.state.weather} />\n        </main>\n      </div>\n    )\n  }  \n}\n","export default (currTime) => {\r\n  const timeFromStorage = Number(localStorage.getItem('lastLogin'));\r\n  const timeDiff = (new Date(currTime) - new Date(timeFromStorage)) / 1000 / 60 / 60;\r\n  return timeDiff > 2;\r\n}","import timeConvert from './timeConvert';\r\n\r\nexport default (data, provider) =>{\r\n  let temp, pressure, sunrise, sunset, sky;\r\n  switch (provider) {\r\n    case 'wb':\r\n      temp = data.data[0].temp;\r\n      pressure = data.data[0].pres;\r\n      sunrise = data.data[0].sunrise;\r\n      sunset = data.data[0].sunset;\r\n      sky = data.data[0].weather.description;\r\n      break;\r\n    case 'owm':\r\n      temp = data.main.temp;\r\n      pressure = data.main.pressure;\r\n      sunrise = timeConvert(data.sys.sunrise * 1000);\r\n      sunset = timeConvert(data.sys.sunset * 1000);\r\n      sky = data.weather[0].description;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return [temp, pressure, sunrise, sunset, sky];\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}