{"version":3,"sources":["utils/credentials.js","utils/processData.js","utils/geoByIP.js","components/geoPicker/geoPicker.js","components/providerPicker/providerPicker.js","components/Header/Header.js","components/weatherScreen/weatherScreen.js","App.js","utils/needUpdate.js","serviceWorker.js","index.js"],"names":["owm","wb","processData","data","provider","temp","pressure","sunrise","sunset","sky","pres","weather","description","main","convertUnixTime","sys","unixDate","Date","toTimeString","split","filter","i","length","join","geoByIP","alert","fetch","then","rs","json","concat","ip","console","log","city","country","longitude","latitude","catch","error","geoPicker_geoPicker","props","react_default","a","createElement","className","cityName","onClick","getCity","handleInput","type","id","placeholder","providerPicker_providerPicker","htmlFor","onChange","defaultValue","default","value","Header","weatherScreen","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","storeValues","Array","fill","navigator","geolocation","getCurrentPosition","position","coords","getWeather","arguments","undefined","state","endpoint","getEndpoint","newWeather","name","city_name","country_code","coord","lat","lon","arr","saveToLocal","forEach","pair","setState","defineProperty","includes","localStorage","setItem","key","selector","el","document","querySelector","inputValue","getItem","bind","assertThisInitialized","currTime","now","cityFromStorage","timeFromStorage","Number","needUpdate","Provider","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4071e1e.chunk.js","sourcesContent":["export const owm = {  \r\n  'url': 'https://api.openweathermap.org/data/2.5/weather?',\r\n  'apiKey': '&appid=51835371b1252869b2e89700df1cdbba',\r\n  'settings': '&units=metric'\r\n}\r\n\r\nexport const wb = {\r\n  'url': 'https://api.weatherbit.io/v2.0/current?',\r\n  'apikey': '&key=51b2268802424671a8d742c3c2e15eaf'\r\n}\r\n","export default (data, provider) => {\r\n  let temp, pressure, sunrise, sunset, sky;\r\n  switch (provider) {\r\n    case 'wb':\r\n      temp = data.data[0].temp;\r\n      pressure = data.data[0].pres;\r\n      sunrise = data.data[0].sunrise;\r\n      sunset = data.data[0].sunset;\r\n      sky = data.data[0].weather.description;\r\n      break;\r\n    case 'owm':\r\n      temp = data.main.temp;\r\n      pressure = data.main.pressure;\r\n      sunrise = convertUnixTime(data.sys.sunrise * 1000);\r\n      sunset = convertUnixTime(data.sys.sunset * 1000);\r\n      sky = data.weather[0].description;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return [temp, pressure, sunrise, sunset, sky];\r\n}\r\n\r\nconst convertUnixTime = unixDate => new Date(unixDate).toTimeString().split(':').filter(i => i.length === 2).join(':');\r\n","export default () => {\r\n  alert('Geolocation was denied by you or is not supported by this browser. We try detect city by IP.');\r\n  fetch('https://api.ipify.org/?format=json')\r\n    .then(rs => rs.json())\r\n    .then(data => fetch(`https://ipapi.co/${data.ip}/json/`))\r\n    .then(rs => rs.json())\r\n    .then(data => {\r\n      console.log([\r\n        ['cityName', `${data.city},${data.country}`],\r\n        ['longitude', `${data.longitude}`],\r\n        ['latitude', `${data.latitude}`]]);\r\n      return [\r\n      ['cityName', `${data.city},${data.country}`],\r\n      ['longitude', `${data.longitude}`],\r\n      ['latitude', `${data.latitude}`]]})\r\n    .catch(error => {\r\n      console.error(error);\r\n      return null;\r\n    });\r\n}","import React from 'react';\r\nimport './geoPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"geoPicker\">\r\n      <p>{props.cityName}</p>\r\n      <button onClick={props.getCity}>Autodetect</button>\r\n      <div className=\"joinInput\">\r\n        <button onClick={() => props.handleInput('cityName', '#locationSearch')}>Go!</button>\r\n        <input type=\"text\" id=\"locationSearch\" placeholder=\"Or type...\" />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport './providerPicker.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"providerPicker\">\r\n      <label htmlFor=\"providerPicker\">Provider: </label>\r\n      <select id=\"providerPicker\" onChange={() => props.handleInput('provider', '#providerPicker')} defaultValue={props.default}>\r\n        <option value=\"owm\">Open Weather Map</option>\r\n        <option value=\"wb\">WeatherBit</option>\r\n      </select>\r\n    </section>\r\n  )\r\n}","import React from 'react';\r\n\r\nimport GeoPicker from '../geoPicker/geoPicker';\r\nimport ProviderPicker from '../providerPicker/providerPicker';\r\nimport './header.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <header>\r\n      <GeoPicker cityName={props.cityName} handleInput={props.handleInput} getCity={props.getCity} />\r\n      <ProviderPicker default={props.provider} handleInput={props.handleInput} />\r\n    </header>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './weather.css';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <section className=\"weatherWrap\">\r\n      <p>\r\n        <span className=\"weatherText temperature\">{props.weather[0]} ℃</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">{props.weather[4]}</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">Pressure - {props.weather[1]} hPa</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">Sunrise - {props.weather[2]} (UTC+3)</span>\r\n      </p>\r\n      <p>\r\n        <span className=\"weatherText\">Sunset - {props.weather[3]} (UTC+3)</span>\r\n      </p>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport * as Provider from './utils/credentials';\r\nimport processData from './utils/processData';\r\nimport needUpdate from './utils/needUpdate';\r\nimport geoByIP from './utils/geoByIP';\r\nimport Header from './components/Header/Header';\r\nimport WeatherScreen from './components/weatherScreen/weatherScreen';\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cityName: '???',\r\n      provider: localStorage.getItem('provider') || 'owm',\r\n      weather: new Array(5).fill('?'),\r\n      latitude: localStorage.getItem('latitude') || '',\r\n      longitude: localStorage.getItem('longitude') || ''\r\n    };\r\n    this.getEndpoint = this.getEndpoint.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const currTime = Date.now();\r\n    const cityFromStorage = localStorage.getItem('cityName');\r\n    if (needUpdate(currTime) || cityFromStorage === 'unavailable') {\r\n      this.getCity();\r\n    } else {\r\n      this.storeValues([\r\n        ['cityName', cityFromStorage],\r\n        ['weather', localStorage.getItem('weather').split(',')]\r\n      ]);\r\n    }\r\n    this.storeValues([['lastLogin', currTime]]);\r\n  }\r\n\r\n  getCity = () => {\r\n    this.storeValues([\r\n      ['cityName', '???'],\r\n      ['weather', new Array(5).fill('?')]\r\n    ]);\r\n    const locationApprove = (position) => {\r\n      this.storeValues([\r\n        ['latitude', position.coords.latitude],\r\n        ['longitude', position.coords.longitude]\r\n      ]);\r\n      this.getWeather();\r\n    };\r\n    const locationDenied = () => {\r\n      this.storeValues(geoByIP());\r\n      this.getWeather();\r\n    }\r\n    navigator.geolocation.getCurrentPosition(locationApprove, locationDenied);\r\n  }\r\n\r\n  getEndpoint (provider = this.state.provider, cityName = false) {\r\n    if (cityName) {\r\n      const endpoint = (provider === 'owm')\r\n      ? `${Provider.owm.url}q=${cityName}${Provider.owm.apiKey}${Provider.owm.settings}`\r\n      : `${Provider.wb.url}city=${cityName}${Provider.wb.apikey}`;\r\n      return endpoint;\r\n    } else {\r\n      const endpoint = (provider === 'owm')\r\n        ? `${Provider.owm.url}&lat=${this.state.latitude}&lon=${this.state.longitude}${Provider.owm.apiKey}${Provider.owm.settings}`\r\n        : `${Provider.wb.url}&lat=${this.state.latitude}&lon=${this.state.longitude}${Provider.wb.apikey}`;\r\n      return endpoint;\r\n    }\r\n  }\r\n\r\n  getWeather = (provider = this.state.provider, cityName) => {\r\n    const endpoint = this.getEndpoint(provider, cityName);\r\n    fetch(endpoint)\r\n      .then(rs => rs.json())\r\n      .then(data => {\r\n        const newWeather = processData(data, provider);\r\n        console.log(data);\r\n        this.storeValues([\r\n          ['weather', newWeather], \r\n          ['cityName', provider === 'owm' ? `${data.name}, ${data.sys.country}` : `${data.data[0].city_name}, ${ data.data[0].country_code}`],\r\n          ['latitude', provider === 'owm' ? data.coord.lat : data.data[0].lat],\r\n          ['longitude', provider === 'owm' ? data.coord.lon : data.data[0].lon]\r\n        ]);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        this.storeValues([\r\n          ['cityName', 'unavailable'],\r\n          ['weather', new Array(5).fill('?')]\r\n        ]);\r\n        return null;\r\n      });\r\n  }\r\n\r\n  storeValues = (arr) => {\r\n    const saveToLocal = ['weather', 'provider', 'cityName', 'lastLogin', 'longitude', 'latitude'];\r\n    arr.forEach(pair => {\r\n      this.setState({ [pair[0]]: pair[1] });\r\n      if (saveToLocal.includes(pair[0])) {\r\n        localStorage.setItem(pair[0], pair[1]);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleInput = (key, selector) => {\r\n    const el = document.querySelector(selector);\r\n    const inputValue = el.value;\r\n    if (inputValue !== '') {\r\n      this.storeValues([\r\n        ['weather', new Array(5).fill('?')],\r\n        [key, inputValue]\r\n      ]);\r\n      if (key === 'provider') {\r\n        this.getWeather(inputValue);\r\n      } else {\r\n        this.getWeather(this.state.provider, inputValue);\r\n        el.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <Header cityName={this.state.cityName}\r\n          handleInput={this.handleInput}\r\n          provider={this.state.provider}\r\n          getCity={this.getCity} />\r\n        <main>\r\n          <WeatherScreen weather={this.state.weather} />\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","export default (currTime) => {\r\n  const timeFromStorage = Number(localStorage.getItem('lastLogin'));\r\n  const timeDiff = (new Date(currTime) - new Date(timeFromStorage)) / 1000 / 60 / 60;\r\n  return timeDiff > 2;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}